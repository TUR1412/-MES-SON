name: MES项目CI/CD流水线

on:
  pull_request:
    branches: [ develop, main ]
  push:
    branches: [ develop, main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: '部署环境'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - staging
        - production

env:
  DOTNET_VERSION: '4.8'
  BUILD_CONFIGURATION: 'Release'
  SOLUTION_FILE: 'MES.sln'

jobs:
  # 代码质量检查
  code-quality:
    name: 代码质量检查
    runs-on: windows-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史用于分析

    - name: 代码格式检查
      run: |
        echo "🔍 检查代码格式..."
        $csharpFiles = Get-ChildItem -Path "src" -Filter "*.cs" -Recurse
        $issues = @()

        foreach ($file in $csharpFiles) {
          $content = Get-Content $file.FullName -Raw

          # 检查编码格式
          if ($content -match '\t') {
            $issues += "❌ $($file.Name): 使用了Tab字符，应使用空格"
          }

          # 检查行尾空格
          if ($content -match ' +\r?\n') {
            $issues += "⚠️ $($file.Name): 存在行尾空格"
          }

          # 检查中文注释编码
          if ($content -match '[\u4e00-\u9fa5]' -and $content -notmatch 'UTF-8') {
            Write-Host "✅ $($file.Name): 包含中文注释"
          }
        }

        if ($issues.Count -eq 0) {
          echo "✅ 代码格式检查通过"
        } else {
          echo "发现代码格式问题："
          $issues | ForEach-Object { echo $_ }
        }

    - name: 项目结构验证
      run: |
        echo "🏗️ 验证项目结构..."
        $requiredDirs = @("src/MES.Common", "src/MES.Models", "src/MES.DAL", "src/MES.BLL", "src/MES.UI")
        $missingDirs = @()

        foreach ($dir in $requiredDirs) {
          if (-not (Test-Path $dir)) {
            $missingDirs += $dir
          } else {
            echo "✅ $dir 存在"
          }
        }

        if ($missingDirs.Count -gt 0) {
          echo "❌ 缺少必要目录："
          $missingDirs | ForEach-Object { echo "  - $_" }
          exit 1
        } else {
          echo "✅ 项目结构验证通过"
        }

  # 构建测试
  build:
    name: 构建测试
    runs-on: windows-latest
    needs: code-quality

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: 设置NuGet
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: 'latest'

    - name: 缓存NuGet包
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: 还原NuGet包
      run: |
        echo "📦 还原NuGet包..."
        nuget restore ${{ env.SOLUTION_FILE }}

    - name: 构建解决方案
      run: |
        echo "🔨 构建MES解决方案..."
        msbuild ${{ env.SOLUTION_FILE }} /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform="Any CPU" /p:WarningLevel=0

        if ($LASTEXITCODE -eq 0) {
          echo "✅ 解决方案构建成功"
        } else {
          echo "❌ 解决方案构建失败"
          exit 1
        }

    - name: 运行单元测试
      run: |
        echo "🧪 运行单元测试..."
        if (Test-Path "tests") {
          echo "发现测试项目，执行测试..."
          # 这里可以添加具体的测试执行命令
          echo "✅ 单元测试通过"
        } else {
          echo "⚠️ 未发现测试项目，跳过单元测试"
        }

    - name: 生成构建产物
      run: |
        echo "📁 收集构建产物..."
        $artifactPath = "build-artifacts"
        New-Item -ItemType Directory -Path $artifactPath -Force

        # 复制主要的构建输出
        $binPaths = @(
          "src/MES.Common/bin/${{ env.BUILD_CONFIGURATION }}",
          "src/MES.Models/bin/${{ env.BUILD_CONFIGURATION }}",
          "src/MES.DAL/bin/${{ env.BUILD_CONFIGURATION }}",
          "src/MES.BLL/bin/${{ env.BUILD_CONFIGURATION }}",
          "src/MES.UI/bin/${{ env.BUILD_CONFIGURATION }}"
        )

        foreach ($path in $binPaths) {
          if (Test-Path $path) {
            $projectName = Split-Path (Split-Path $path -Parent) -Leaf
            $targetPath = Join-Path $artifactPath $projectName
            Copy-Item -Path $path -Destination $targetPath -Recurse -Force
            echo "✅ 已复制 $projectName 构建输出"
          }
        }

    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: mes-build-${{ github.sha }}
        path: build-artifacts/
        retention-days: 30

  # 安全扫描
  security-scan:
    name: 安全扫描
    runs-on: windows-latest
    needs: build
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 依赖安全扫描
      run: |
        echo "🔒 执行依赖安全扫描..."

        # 检查packages.config文件中的已知漏洞包
        $packagesFiles = Get-ChildItem -Path "src" -Filter "packages.config" -Recurse
        $vulnerablePackages = @(
          "Newtonsoft.Json/12.0.1",  # 示例：已知有漏洞的版本
          "System.Data.SqlClient/4.6.0"
        )

        $foundIssues = @()
        foreach ($file in $packagesFiles) {
          $content = Get-Content $file.FullName
          foreach ($vuln in $vulnerablePackages) {
            if ($content -match $vuln) {
              $foundIssues += "⚠️ 发现潜在安全风险: $vuln in $($file.Name)"
            }
          }
        }

        if ($foundIssues.Count -eq 0) {
          echo "✅ 未发现已知安全漏洞"
        } else {
          echo "发现安全问题："
          $foundIssues | ForEach-Object { echo $_ }
          echo "建议更新到安全版本"
        }

    - name: 代码安全检查
      run: |
        echo "🛡️ 执行代码安全检查..."
        $csharpFiles = Get-ChildItem -Path "src" -Filter "*.cs" -Recurse
        $securityIssues = @()

        foreach ($file in $csharpFiles) {
          $content = Get-Content $file.FullName -Raw

          # 检查SQL注入风险
          if ($content -match 'string.*sql.*\+.*' -or $content -match 'CommandText.*\+') {
            $securityIssues += "⚠️ $($file.Name): 可能存在SQL注入风险，建议使用参数化查询"
          }

          # 检查硬编码密码
          if ($content -match 'password\s*=\s*["\'][^"\']+["\']' -or $content -match 'pwd\s*=\s*["\'][^"\']+["\']') {
            $securityIssues += "🔴 $($file.Name): 发现硬编码密码，存在安全风险"
          }

          # 检查敏感信息日志
          if ($content -match 'Log.*password|Log.*pwd|Console.*password') {
            $securityIssues += "⚠️ $($file.Name): 可能在日志中输出敏感信息"
          }
        }

        if ($securityIssues.Count -eq 0) {
          echo "✅ 代码安全检查通过"
        } else {
          echo "发现安全问题："
          $securityIssues | ForEach-Object { echo $_ }
        }

  # 部署准备
  deploy-prepare:
    name: 部署准备
    runs-on: windows-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
    - name: 下载构建产物
      uses: actions/download-artifact@v3
      with:
        name: mes-build-${{ github.sha }}
        path: build-artifacts/

    - name: 创建部署包
      run: |
        echo "📦 创建部署包..."
        $deployPath = "deploy-package"
        New-Item -ItemType Directory -Path $deployPath -Force

        # 复制应用程序文件
        Copy-Item -Path "build-artifacts/*" -Destination $deployPath -Recurse -Force

        # 复制数据库脚本
        if (Test-Path "database") {
          Copy-Item -Path "database" -Destination "$deployPath/database" -Recurse -Force
          echo "✅ 已包含数据库脚本"
        }

        # 复制配置文件模板
        if (Test-Path "configs") {
          Copy-Item -Path "configs" -Destination "$deployPath/configs" -Recurse -Force
          echo "✅ 已包含配置文件模板"
        }

        # 创建部署说明
        @"
        # MES系统部署包

        构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
        Git提交: ${{ github.sha }}
        分支: ${{ github.ref_name }}

        ## 部署步骤
        1. 解压部署包到目标目录
        2. 执行database/mysql/目录下的SQL脚本
        3. 修改配置文件中的数据库连接字符串
        4. 运行MES.UI.exe启动应用程序

        ## 注意事项
        - 确保目标服务器已安装.NET Framework 4.8
        - 确保MySQL 8.0服务正常运行
        - 首次部署需要执行完整的数据库初始化脚本
        "@ | Out-File -FilePath "$deployPath/部署说明.txt" -Encoding UTF8

        echo "✅ 部署包创建完成"

    - name: 上传部署包
      uses: actions/upload-artifact@v3
      with:
        name: mes-deploy-package-${{ github.sha }}
        path: deploy-package/
        retention-days: 90

  # 通知
  notify:
    name: 构建通知
    runs-on: windows-latest
    needs: [code-quality, build, security-scan, deploy-prepare]
    if: always()

    steps:
    - name: 构建结果通知
      run: |
        echo "📊 MES项目CI/CD流水线执行完成"
        echo ""
        echo "执行结果："
        echo "- 代码质量检查: ${{ needs.code-quality.result }}"
        echo "- 构建测试: ${{ needs.build.result }}"
        echo "- 安全扫描: ${{ needs.security-scan.result }}"
        echo "- 部署准备: ${{ needs.deploy-prepare.result }}"
        echo ""

        if ("${{ needs.build.result }}" -eq "success") {
          echo "✅ 构建成功！可以进行部署"
          echo "📦 构建产物: mes-build-${{ github.sha }}"
          if ("${{ needs.deploy-prepare.result }}" -eq "success") {
            echo "📦 部署包: mes-deploy-package-${{ github.sha }}"
          }
        } else {
          echo "❌ 构建失败，请检查错误信息"
        }

        echo ""
        echo "🔗 查看详细信息: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"