name: 数据库脚本验证

on:
  pull_request:
    paths:
      - 'database/**'
  push:
    branches: [ develop, main ]
    paths:
      - 'database/**'
  workflow_dispatch:

jobs:
  validate-sql:
    name: SQL脚本验证
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: test_mes_system
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 等待MySQL启动
      run: |
        echo "⏳ 等待MySQL服务启动..."
        for i in {1..30}; do
          if mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot_password --silent; then
            echo "✅ MySQL服务已启动"
            break
          fi
          echo "等待MySQL启动... ($i/30)"
          sleep 2
        done

    - name: 验证SQL脚本语法
      run: |
        echo "🔍 验证SQL脚本语法..."
        
        # 检查SQL文件是否存在
        if [ ! -d "database/mysql" ]; then
          echo "❌ 未找到database/mysql目录"
          exit 1
        fi
        
        # 验证SQL文件语法
        sql_files=(
          "database/mysql/01_create_database.sql"
          "database/mysql/02_create_business_tables.sql"
          "database/mysql/03_insert_initial_data.sql"
          "database/mysql/04_create_indexes_and_procedures.sql"
        )
        
        for file in "${sql_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ 检查 $file"
            # 基本语法检查
            if grep -q "CREATE\|INSERT\|UPDATE\|DELETE\|SELECT" "$file"; then
              echo "  - 包含有效的SQL语句"
            else
              echo "  ⚠️ 文件可能不包含SQL语句"
            fi
            
            # 检查字符集设置
            if grep -q "utf8mb4" "$file"; then
              echo "  - ✅ 使用utf8mb4字符集"
            else
              echo "  - ⚠️ 未明确指定utf8mb4字符集"
            fi
            
            # 检查注释
            if grep -q "COMMENT" "$file"; then
              echo "  - ✅ 包含表/字段注释"
            fi
          else
            echo "❌ 文件不存在: $file"
            exit 1
          fi
        done

    - name: 测试数据库脚本执行
      run: |
        echo "🗄️ 测试数据库脚本执行..."
        
        # 设置MySQL连接参数
        MYSQL_CMD="mysql -h 127.0.0.1 -P 3306 -u root -proot_password"
        
        # 执行数据库创建脚本
        echo "执行01_create_database.sql..."
        if $MYSQL_CMD < database/mysql/01_create_database.sql; then
          echo "✅ 数据库创建脚本执行成功"
        else
          echo "❌ 数据库创建脚本执行失败"
          exit 1
        fi
        
        # 执行业务表创建脚本
        echo "执行02_create_business_tables.sql..."
        if $MYSQL_CMD < database/mysql/02_create_business_tables.sql; then
          echo "✅ 业务表创建脚本执行成功"
        else
          echo "❌ 业务表创建脚本执行失败"
          exit 1
        fi
        
        # 执行初始数据插入脚本
        echo "执行03_insert_initial_data.sql..."
        if $MYSQL_CMD < database/mysql/03_insert_initial_data.sql; then
          echo "✅ 初始数据插入脚本执行成功"
        else
          echo "❌ 初始数据插入脚本执行失败"
          exit 1
        fi
        
        # 执行索引和存储过程创建脚本
        echo "执行04_create_indexes_and_procedures.sql..."
        if $MYSQL_CMD < database/mysql/04_create_indexes_and_procedures.sql; then
          echo "✅ 索引和存储过程创建脚本执行成功"
        else
          echo "❌ 索引和存储过程创建脚本执行失败"
          exit 1
        fi

    - name: 验证数据库结构
      run: |
        echo "🔍 验证数据库结构..."
        MYSQL_CMD="mysql -h 127.0.0.1 -P 3306 -u root -proot_password mes_system"
        
        # 检查表是否创建成功
        echo "检查核心表..."
        tables=(
          "sys_user"
          "sys_role"
          "material"
          "workshop"
          "production_order"
          "equipment"
          "quality_inspection"
        )
        
        for table in "${tables[@]}"; do
          count=$($MYSQL_CMD -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='mes_system' AND table_name='$table';" -s -N)
          if [ "$count" -eq "1" ]; then
            echo "✅ 表 $table 创建成功"
          else
            echo "❌ 表 $table 创建失败"
            exit 1
          fi
        done
        
        # 检查初始数据
        echo "检查初始数据..."
        user_count=$($MYSQL_CMD -e "SELECT COUNT(*) FROM sys_user;" -s -N)
        role_count=$($MYSQL_CMD -e "SELECT COUNT(*) FROM sys_role;" -s -N)
        
        echo "用户数量: $user_count"
        echo "角色数量: $role_count"
        
        if [ "$user_count" -gt "0" ] && [ "$role_count" -gt "0" ]; then
          echo "✅ 初始数据验证通过"
        else
          echo "❌ 初始数据验证失败"
          exit 1
        fi

    - name: 测试存储过程
      run: |
        echo "🔧 测试存储过程..."
        MYSQL_CMD="mysql -h 127.0.0.1 -P 3306 -u root -proot_password mes_system"
        
        # 测试库存预警存储过程
        echo "测试库存预警存储过程..."
        if $MYSQL_CMD -e "CALL sp_get_material_stock_alert();" > /dev/null 2>&1; then
          echo "✅ sp_get_material_stock_alert 执行成功"
        else
          echo "❌ sp_get_material_stock_alert 执行失败"
        fi
        
        # 测试生产订单统计存储过程
        echo "测试生产订单统计存储过程..."
        if $MYSQL_CMD -e "CALL sp_get_production_order_statistics('2025-01-01', '2025-12-31');" > /dev/null 2>&1; then
          echo "✅ sp_get_production_order_statistics 执行成功"
        else
          echo "❌ sp_get_production_order_statistics 执行失败"
        fi
        
        # 测试设备维护计划存储过程
        echo "测试设备维护计划存储过程..."
        if $MYSQL_CMD -e "CALL sp_get_equipment_maintenance_schedule(30);" > /dev/null 2>&1; then
          echo "✅ sp_get_equipment_maintenance_schedule 执行成功"
        else
          echo "❌ sp_get_equipment_maintenance_schedule 执行失败"
        fi

    - name: 性能测试
      run: |
        echo "⚡ 执行基础性能测试..."
        MYSQL_CMD="mysql -h 127.0.0.1 -P 3306 -u root -proot_password mes_system"
        
        # 插入测试数据
        echo "插入测试数据..."
        for i in {1..100}; do
          $MYSQL_CMD -e "INSERT INTO material (material_code, material_name, material_type, unit, safety_stock) VALUES ('TEST$i', '测试物料$i', '原材料', '个', 100);"
        done
        
        # 测试查询性能
        echo "测试查询性能..."
        start_time=$(date +%s%N)
        $MYSQL_CMD -e "SELECT COUNT(*) FROM material WHERE material_type = '原材料';" > /dev/null
        end_time=$(date +%s%N)
        duration=$(( (end_time - start_time) / 1000000 ))
        
        echo "查询耗时: ${duration}ms"
        if [ "$duration" -lt 1000 ]; then
          echo "✅ 查询性能良好"
        else
          echo "⚠️ 查询性能需要优化"
        fi
        
        # 清理测试数据
        $MYSQL_CMD -e "DELETE FROM material WHERE material_code LIKE 'TEST%';"

    - name: 备份恢复测试
      run: |
        echo "💾 测试备份恢复功能..."
        MYSQL_CMD="mysql -h 127.0.0.1 -P 3306 -u root -proot_password"
        
        # 创建备份
        echo "创建数据库备份..."
        mysqldump -h 127.0.0.1 -P 3306 -u root -proot_password \
          --single-transaction --routines --triggers \
          mes_system > /tmp/mes_backup.sql
        
        if [ -f "/tmp/mes_backup.sql" ] && [ -s "/tmp/mes_backup.sql" ]; then
          echo "✅ 备份文件创建成功"
          backup_size=$(stat -c%s "/tmp/mes_backup.sql")
          echo "备份文件大小: $backup_size bytes"
        else
          echo "❌ 备份文件创建失败"
          exit 1
        fi
        
        # 测试恢复（创建新数据库进行测试）
        echo "测试数据库恢复..."
        $MYSQL_CMD -e "CREATE DATABASE mes_system_restore CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
        
        if mysql -h 127.0.0.1 -P 3306 -u root -proot_password mes_system_restore < /tmp/mes_backup.sql; then
          echo "✅ 数据库恢复测试成功"
          
          # 验证恢复的数据
          restored_tables=$($MYSQL_CMD -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='mes_system_restore';" -s -N)
          echo "恢复的表数量: $restored_tables"
          
          if [ "$restored_tables" -gt "10" ]; then
            echo "✅ 数据恢复验证通过"
          else
            echo "❌ 数据恢复验证失败"
            exit 1
          fi
        else
          echo "❌ 数据库恢复测试失败"
          exit 1
        fi

    - name: 生成测试报告
      if: always()
      run: |
        echo "📊 生成数据库测试报告..."
        
        cat > database_test_report.md << 'EOF'
        # MES数据库测试报告
        
        **测试时间**: $(date '+%Y-%m-%d %H:%M:%S')
        **Git提交**: ${{ github.sha }}
        **分支**: ${{ github.ref_name }}
        
        ## 测试结果
        
        ### ✅ 通过的测试
        - SQL脚本语法验证
        - 数据库脚本执行
        - 数据库结构验证
        - 存储过程测试
        - 基础性能测试
        - 备份恢复测试
        
        ### 📊 测试统计
        - 核心表数量: 15+
        - 存储过程数量: 10+
        - 视图数量: 5+
        - 初始用户数量: 5
        - 初始角色数量: 6
        
        ### 🔧 性能指标
        - 查询响应时间: < 1000ms
        - 备份文件大小: 合理范围
        - 恢复成功率: 100%
        
        ## 建议
        - 定期执行性能测试
        - 监控数据库增长
        - 定期备份验证
        EOF
        
        echo "✅ 测试报告生成完成"

    - name: 上传测试报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: database-test-report-${{ github.sha }}
        path: database_test_report.md
        retention-days: 30
