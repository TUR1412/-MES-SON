name: 发布管理

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (例如: v1.0.0)'
        required: true
        type: string
      release_notes:
        description: '发布说明'
        required: false
        type: string
        default: '常规版本发布'

env:
  BUILD_CONFIGURATION: 'Release'
  DOTNET_VERSION: '4.8'

jobs:
  create-release:
    name: 创建发布版本
    runs-on: windows-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 确定版本号
      id: version
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.version }}"
        } else {
          $version = "${{ github.ref_name }}"
        }
        
        # 确保版本号格式正确
        if ($version -notmatch '^v\d+\.\d+\.\d+') {
          echo "❌ 版本号格式错误，应为 vX.Y.Z 格式"
          exit 1
        }
        
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "✅ 版本号: $version"

    - name: 生成变更日志
      id: changelog
      run: |
        echo "📝 生成变更日志..."
        
        # 获取上一个标签
        $lastTag = git describe --tags --abbrev=0 HEAD^ 2>$null
        if (-not $lastTag) {
          $lastTag = "HEAD~10"  # 如果没有标签，使用最近10个提交
        }
        
        echo "从 $lastTag 到当前的变更："
        
        # 生成变更日志
        $changelog = @"
        ## 🚀 新功能
        $(git log $lastTag..HEAD --pretty=format:"- %s" --grep="feat:" --grep="add:" --grep="新增" | Select-Object -First 10)
        
        ## 🐛 问题修复
        $(git log $lastTag..HEAD --pretty=format:"- %s" --grep="fix:" --grep="修复" --grep="bug:" | Select-Object -First 10)
        
        ## 📈 性能优化
        $(git log $lastTag..HEAD --pretty=format:"- %s" --grep="perf:" --grep="优化" --grep="performance" | Select-Object -First 5)
        
        ## 📚 文档更新
        $(git log $lastTag..HEAD --pretty=format:"- %s" --grep="docs:" --grep="文档" | Select-Object -First 5)
        
        ## 🔧 其他变更
        $(git log $lastTag..HEAD --pretty=format:"- %s" --oneline | Select-Object -First 20)
        "@
        
        # 保存到文件
        $changelog | Out-File -FilePath "CHANGELOG.md" -Encoding UTF8
        echo "✅ 变更日志生成完成"

    - name: 创建GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: MES系统 ${{ steps.version.outputs.version }}
        body: |
          # MES制造执行系统 ${{ steps.version.outputs.version }}
          
          **发布时间**: ${{ github.event.head_commit.timestamp }}
          **提交哈希**: ${{ github.sha }}
          
          ## 📋 发布说明
          ${{ github.event.inputs.release_notes || '常规版本发布，包含功能改进和问题修复' }}
          
          ## 📦 下载说明
          - `mes-system-${{ steps.version.outputs.version }}-full.zip`: 完整安装包（包含应用程序和数据库脚本）
          - `mes-system-${{ steps.version.outputs.version }}-app.zip`: 仅应用程序
          - `mes-system-${{ steps.version.outputs.version }}-database.zip`: 仅数据库脚本
          - `mes-system-${{ steps.version.outputs.version }}-docs.zip`: 文档和部署指南
          
          ## 🔧 系统要求
          - Windows 10/11 或 Windows Server 2016+
          - .NET Framework 4.8
          - MySQL 8.0+
          - 4GB RAM (推荐 8GB+)
          
          ## 📚 快速开始
          1. 下载完整安装包
          2. 解压到目标目录
          3. 按照部署指南配置数据库
          4. 运行 MES.UI.exe 启动应用
          
          详细部署说明请参考文档包中的《MES系统部署运维指南.md》
        draft: false
        prerelease: false

  build-release:
    name: 构建发布包
    runs-on: windows-latest
    needs: create-release
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: 设置NuGet
      uses: nuget/setup-nuget@v1

    - name: 还原NuGet包
      run: nuget restore MES.sln

    - name: 构建发布版本
      run: |
        echo "🔨 构建发布版本..."
        msbuild MES.sln /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform="Any CPU" /p:OutputPath="bin\Release\"
        
        if ($LASTEXITCODE -eq 0) {
          echo "✅ 发布版本构建成功"
        } else {
          echo "❌ 发布版本构建失败"
          exit 1
        }

    - name: 创建应用程序包
      run: |
        echo "📦 创建应用程序包..."
        $appPackagePath = "release-packages/app"
        New-Item -ItemType Directory -Path $appPackagePath -Force
        
        # 复制主要应用程序文件
        $sourceDir = "src/MES.UI/bin/${{ env.BUILD_CONFIGURATION }}"
        if (Test-Path $sourceDir) {
          Copy-Item -Path "$sourceDir/*" -Destination $appPackagePath -Recurse -Force
          echo "✅ 应用程序文件复制完成"
        }
        
        # 复制依赖的DLL
        $dependencies = @(
          "src/MES.Common/bin/${{ env.BUILD_CONFIGURATION }}",
          "src/MES.Models/bin/${{ env.BUILD_CONFIGURATION }}",
          "src/MES.DAL/bin/${{ env.BUILD_CONFIGURATION }}",
          "src/MES.BLL/bin/${{ env.BUILD_CONFIGURATION }}"
        )
        
        foreach ($dep in $dependencies) {
          if (Test-Path $dep) {
            Copy-Item -Path "$dep/*.dll" -Destination $appPackagePath -Force
            Copy-Item -Path "$dep/*.pdb" -Destination $appPackagePath -Force -ErrorAction SilentlyContinue
          }
        }
        
        # 创建配置文件模板
        @"
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <connectionStrings>
            <add name="MESConnection" 
                 connectionString="Server=localhost;Database=mes_system;Uid=mes_user;Pwd=请修改密码;CharSet=utf8mb4;" 
                 providerName="MySql.Data.MySqlClient" />
          </connectionStrings>
          
          <appSettings>
            <add key="SystemName" value="MES制造执行系统" />
            <add key="SystemVersion" value="${{ needs.create-release.outputs.version }}" />
            <add key="LogLevel" value="INFO" />
            <add key="LogPath" value="Logs\" />
          </appSettings>
          
          <startup>
            <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8" />
          </startup>
        </configuration>
        "@ | Out-File -FilePath "$appPackagePath/App.config.template" -Encoding UTF8
        
        echo "✅ 应用程序包创建完成"

    - name: 创建数据库包
      run: |
        echo "🗄️ 创建数据库包..."
        $dbPackagePath = "release-packages/database"
        New-Item -ItemType Directory -Path $dbPackagePath -Force
        
        # 复制数据库脚本
        if (Test-Path "database") {
          Copy-Item -Path "database/*" -Destination $dbPackagePath -Recurse -Force
          echo "✅ 数据库脚本复制完成"
        }
        
        # 创建数据库部署脚本
        @"
        @echo off
        echo MES系统数据库部署脚本
        echo ========================
        echo.
        
        set /p MYSQL_HOST=请输入MySQL服务器地址 (默认: localhost): 
        if "%MYSQL_HOST%"=="" set MYSQL_HOST=localhost
        
        set /p MYSQL_USER=请输入MySQL用户名 (默认: root): 
        if "%MYSQL_USER%"=="" set MYSQL_USER=root
        
        set /p MYSQL_PASSWORD=请输入MySQL密码: 
        
        echo.
        echo 开始部署数据库...
        echo.
        
        echo 1. 创建数据库和基础表...
        mysql -h %MYSQL_HOST% -u %MYSQL_USER% -p%MYSQL_PASSWORD% < mysql\01_create_database.sql
        if errorlevel 1 goto error
        
        echo 2. 创建业务表...
        mysql -h %MYSQL_HOST% -u %MYSQL_USER% -p%MYSQL_PASSWORD% < mysql\02_create_business_tables.sql
        if errorlevel 1 goto error
        
        echo 3. 插入初始数据...
        mysql -h %MYSQL_HOST% -u %MYSQL_USER% -p%MYSQL_PASSWORD% < mysql\03_insert_initial_data.sql
        if errorlevel 1 goto error
        
        echo 4. 创建索引和存储过程...
        mysql -h %MYSQL_HOST% -u %MYSQL_USER% -p%MYSQL_PASSWORD% < mysql\04_create_indexes_and_procedures.sql
        if errorlevel 1 goto error
        
        echo.
        echo ✅ 数据库部署完成！
        echo.
        echo 默认管理员账号: admin / 123456
        echo 团队成员账号: tianDi/123456, userL/123456, userH/123456, userS/123456
        echo.
        pause
        goto end
        
        :error
        echo.
        echo ❌ 数据库部署失败！请检查错误信息。
        echo.
        pause
        
        :end
        "@ | Out-File -FilePath "$dbPackagePath/deploy_database.bat" -Encoding Default
        
        echo "✅ 数据库包创建完成"

    - name: 创建文档包
      run: |
        echo "📚 创建文档包..."
        $docsPackagePath = "release-packages/docs"
        New-Item -ItemType Directory -Path $docsPackagePath -Force
        
        # 复制文档文件
        $docFiles = @(
          "README.md",
          "docs/*.md",
          "database/mysql/README.md"
        )
        
        foreach ($pattern in $docFiles) {
          $files = Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue
          foreach ($file in $files) {
            $targetPath = Join-Path $docsPackagePath $file.Name
            Copy-Item -Path $file.FullName -Destination $targetPath -Force
            echo "✅ 已复制文档: $($file.Name)"
          }
        }
        
        # 创建发布说明
        @"
        # MES制造执行系统 ${{ needs.create-release.outputs.version }}
        
        ## 📦 发布包内容
        
        ### 应用程序包 (mes-system-${{ needs.create-release.outputs.version }}-app.zip)
        - MES.UI.exe - 主应用程序
        - 相关DLL文件和依赖
        - App.config.template - 配置文件模板
        
        ### 数据库包 (mes-system-${{ needs.create-release.outputs.version }}-database.zip)
        - MySQL数据库脚本
        - 自动部署脚本
        - 备份恢复脚本
        - 性能监控脚本
        
        ### 文档包 (mes-system-${{ needs.create-release.outputs.version }}-docs.zip)
        - 系统说明文档
        - 部署运维指南
        - 数据库设计文档
        - 用户操作手册
        
        ## 🚀 快速部署
        
        1. **环境准备**
           - 安装 .NET Framework 4.8
           - 安装 MySQL 8.0
           - 确保防火墙允许MySQL端口(3306)访问
        
        2. **数据库部署**
           - 解压数据库包
           - 运行 deploy_database.bat
           - 按提示输入MySQL连接信息
        
        3. **应用程序部署**
           - 解压应用程序包到目标目录
           - 复制 App.config.template 为 App.config
           - 修改数据库连接字符串
           - 运行 MES.UI.exe
        
        ## 🔧 配置说明
        
        ### 数据库连接配置
        ```xml
        <connectionStrings>
          <add name="MESConnection" 
               connectionString="Server=数据库服务器;Database=mes_system;Uid=mes_user;Pwd=数据库密码;CharSet=utf8mb4;" 
               providerName="MySql.Data.MySqlClient" />
        </connectionStrings>
        ```
        
        ### 默认用户账号
        - 管理员: admin / 123456
        - 组长: tianDi / 123456
        - 物料管理: userL / 123456
        - 生产管理: userH / 123456
        - 车间管理: userS / 123456
        
        ## 📞 技术支持
        
        如遇到部署或使用问题，请：
        1. 查阅《MES系统部署运维指南.md》
        2. 检查系统日志文件
        3. 联系技术支持团队
        
        ---
        **发布时间**: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
        **版本**: ${{ needs.create-release.outputs.version }}
        **构建**: ${{ github.sha }}
        "@ | Out-File -FilePath "$docsPackagePath/发布说明.md" -Encoding UTF8
        
        echo "✅ 文档包创建完成"

    - name: 打包发布文件
      run: |
        echo "📦 打包发布文件..."
        
        # 创建各个压缩包
        $version = "${{ needs.create-release.outputs.version }}"
        
        # 应用程序包
        Compress-Archive -Path "release-packages/app/*" -DestinationPath "mes-system-$version-app.zip" -Force
        echo "✅ 应用程序包: mes-system-$version-app.zip"
        
        # 数据库包
        Compress-Archive -Path "release-packages/database/*" -DestinationPath "mes-system-$version-database.zip" -Force
        echo "✅ 数据库包: mes-system-$version-database.zip"
        
        # 文档包
        Compress-Archive -Path "release-packages/docs/*" -DestinationPath "mes-system-$version-docs.zip" -Force
        echo "✅ 文档包: mes-system-$version-docs.zip"
        
        # 完整包（包含所有内容）
        $fullPackagePath = "release-packages/full"
        New-Item -ItemType Directory -Path $fullPackagePath -Force
        Copy-Item -Path "release-packages/app/*" -Destination $fullPackagePath -Recurse -Force
        Copy-Item -Path "release-packages/database" -Destination $fullPackagePath -Recurse -Force
        Copy-Item -Path "release-packages/docs" -Destination $fullPackagePath -Recurse -Force
        
        Compress-Archive -Path "release-packages/full/*" -DestinationPath "mes-system-$version-full.zip" -Force
        echo "✅ 完整包: mes-system-$version-full.zip"
        
        # 显示文件大小
        Get-ChildItem -Path "mes-system-$version-*.zip" | ForEach-Object {
          $sizeMB = [math]::Round($_.Length / 1MB, 2)
          echo "$($_.Name): ${sizeMB}MB"
        }

    - name: 上传发布文件
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./mes-system-${{ needs.create-release.outputs.version }}-full.zip
        asset_name: mes-system-${{ needs.create-release.outputs.version }}-full.zip
        asset_content_type: application/zip

    - name: 上传应用程序包
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./mes-system-${{ needs.create-release.outputs.version }}-app.zip
        asset_name: mes-system-${{ needs.create-release.outputs.version }}-app.zip
        asset_content_type: application/zip

    - name: 上传数据库包
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./mes-system-${{ needs.create-release.outputs.version }}-database.zip
        asset_name: mes-system-${{ needs.create-release.outputs.version }}-database.zip
        asset_content_type: application/zip

    - name: 上传文档包
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./mes-system-${{ needs.create-release.outputs.version }}-docs.zip
        asset_name: mes-system-${{ needs.create-release.outputs.version }}-docs.zip
        asset_content_type: application/zip

  notify-release:
    name: 发布通知
    runs-on: windows-latest
    needs: [create-release, build-release]
    if: always()
    
    steps:
    - name: 发布完成通知
      run: |
        echo "🎉 MES系统 ${{ needs.create-release.outputs.version }} 发布完成！"
        echo ""
        echo "📦 发布包："
        echo "- 完整安装包: mes-system-${{ needs.create-release.outputs.version }}-full.zip"
        echo "- 应用程序包: mes-system-${{ needs.create-release.outputs.version }}-app.zip"
        echo "- 数据库包: mes-system-${{ needs.create-release.outputs.version }}-database.zip"
        echo "- 文档包: mes-system-${{ needs.create-release.outputs.version }}-docs.zip"
        echo ""
        echo "🔗 下载地址: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}"
        echo ""
        echo "📋 下一步："
        echo "1. 通知团队成员新版本发布"
        echo "2. 更新部署环境"
        echo "3. 验证新版本功能"
        echo "4. 收集用户反馈"
